@model Courier.Models.ViewModels.LocationV
@{
    ViewBag.Title = "Location Setup";
  
   
}
@using Courier.Models.DbModel;
@Html.Partial("_ClientHeader")
<div class="container">
    <div class="row">
        <div class="col-md-7">
            <div class="package">

                <h3>Location of your package  @ViewBag.OrderID</h3>
                <p>Add Location Details to @ViewBag.PackageName  </p>
                @using (Html.BeginForm("Location", "User"))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.OrderID, new { value = ViewBag.OrderID })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Source, new { @class = "control-label " })
                        @Html.TextBoxFor(model => model.Source, new { @class = "form-control", id = "source" })
                        @Html.ValidationMessageFor(model => model.Source, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Destination, new { @class = "control-label " })
                        @Html.TextAreaFor(model => model.Destination, new { @class = "form-control", id = "des" })
                        @Html.ValidationMessageFor(model => model.Destination, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <div class="">
                            <input type="submit" value="Create" class="btn btn-default" />
                        </div>
                    </div>

                   @Html.HiddenFor(a => a.OrderID, new { value = ViewBag.OrderID });

                    @Html.HiddenFor(a => a.SourceLatitude, new { id = "SouLat" })
                    @Html.HiddenFor(a => a.SourceLogitude, new { id = "SouLog" })

                    @Html.HiddenFor(a => a.DestinationLatitude, new { id = "DesLat" })
                    @Html.HiddenFor(a => a.DestinationLogitude, new { id = "DesLog" })
                }

              




            </div>
        </div>
        <div class="col-md-5">
            <div id="map" class="map" style="height:400px;"></div>
        </div>
        

    </div>

</div>

@section Scripts {
    @*<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDMgIGcjFgCKYtJ8TmPCgmS6Yi11TnUKN4&libraries=places"></script>*@
    @*<script>
            
        var desLat = 1.23, desLog = 0.00;
        var souLat = 2.34, souLog = 0.00;
                            $(function () {
                                var placeSearch, autocomplete, auto2;
                                var mesg;
                                autocomplete = new google.maps.places.Autocomplete(document.getElementById(('source')), { types: ['geocode'] });
                                autocomplete.addListener('place_changed', getAddress);

                                auto2 = new google.maps.places.Autocomplete(document.getElementById(('des')), { types: ['geocode'] });
                                auto2.addListener('place_changed', getAddress2);
                                function getAddress() {
                                    var place = autocomplete.getPlace();
                                    var address = place.formatted_address;
                                    var latitude = place.geometry.location.lat();
                                    var longitude = place.geometry.location.lng();
                                    desLat = latitude;
                                    desLog = longitude;
                                    mesg = "Address1: " + address;
                                    mesg += "\nLatitude: " + latitude;
                                    mesg += "\nLongitude: " + longitude;

                                    $("#SouLat").attr("value", latitude);
                                    $("#SouLog").attr("value", longitude);
                                    console.log("Hidden Field has this valus " + $("#SouLog").val())
                                }

                                function getAddress2(){
                                    var place2 = auto2.getPlace();
                                    var address2 = place2.formatted_address;
                                    var latitude2 = place2.geometry.location.lat();
                                    var longitude2 = place2.geometry.location.lng();

                                    souLat = latitude2;
                                    souLog = longitude2;
                                    mesg += "address2: " + address2;
                                    mesg += "\nLatitude2: " + latitude2;
                                    mesg += "\nLongitude2: " + longitude2;
                                    $("#DesLat").attr("value", latitude2);
                                    $("#DesLog").attr("value", longitude2);

                                    setMap(desLat, desLog, souLat, souLog);
                                    console.log(mesg);
                                    //alert(mesg);


                                }

                            });


    </script>*@
    <script>
                            $(function () {

                                var tempdata, errorMessage;
                            @if(TempData["show"] != null)
                            {
                                @:tempdata = TempData["show"]
                            }
                                if (tempdata === 1) {
                                    $("#myModal").modal("show");
                                }});


    </script>

    @*<script>
        function setMap(desLat, desLog, souLat, souLog) {
            var iconDes = '@Url.Content("~/img/Location_Destination.png")';
            var iconSr = '@Url.Content("~/img/Location_Source.png")';
            var iconCurr = '@Url.Content("~/img/Location_Current.png")';
            //var desLat = $("#DesLat").attr("value"), desLog = $("#DesLog").attr("value");
            //var souLat = $("#SouLat").attr("value"), souLog = $("#SouLog").attr("value");

            var points = [
            {
                "type": "sr",
                "Address": "Nigeria",
                "Latitude": desLat,
                "Logitude": desLog,
            },
            {
                "type": "des",
                "Address": "London, UK",
                "Latitude": souLat,
                "Logitude": souLog,
            },
            //{
            //    "type": "curr",
            //    "Address": "Ghana",
            //    "Latitude": 7.946527,
            //    "Logitude": -1.0231939999999895,
            //}
            ];
            //set line positions
            var line = [
                { lat: souLat, lng: souLog },

                 { lat: desLat, lng: desLog },
            ];
            //set line
            var pathLine = new google.maps.Polyline({
                path: line,
                geodesic: true,
                strokeColor: '#39adb4',
                strokeOpacity: 1.0,
                strokeWeight: 2
            });

            //      <img src="~/img/Location_Current.png" />
            var image = {
                url: '@Url.Content("~/img/Location_Current.png")',

                origin: new google.maps.Point(0, 0),
                // The anchor for this image is the base of the flagpole at (0, 40).
                anchor: new google.maps.Point(0, 40)
            };
            var myLatLng = { lat: desLat, lng: desLog };
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 4,
                center: myLatLng
            });
            //loop through array of latitude and add marker
            points.forEach(element => {
                var marker = new google.maps.Marker({
                    position: { lat: element.Latitude, lng: element.Logitude },
                    map: map,
                    icon: (element.type === "sr" ? iconSr : element.type === "des" ? iconDes : iconCurr),
                    animation: (element.type === "curr" ? google.maps.Animation.BOUNCE : google.maps.Animation.DROP),
                    title: (element.type === "sr" ? "Source Location" : element.type === "des" ? "Destination" : "Current Location"),
                });
            });

            //add a single marker;

            //draw line
            pathLine.setMap(map);

        }
                        $(function () {
                            $("#des").change(function () {
                               
                            });

                        });
                        //function initMap() {

                        //}

    </script>*@
    @Scripts.Render("~/bundles/jqueryval")
}





